<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context.xsd">
    <!-- 此文件存放所有spring的dao相关的配置 以及 mybatis的配置 -->

    <!-- 配置整合mybatis过程 -->
    <!-- 1. 配置数据库相关参数
        properties（配置文件）中的属性通过如 ${url} 的方式进行获取
        如下面的 ${driver} 可以获取到的值为 com.mysql.jdbc.Driver
        -->
    <!-- 在实际开发中，配置数据库相关一般是在java配置文件properties中修改，
        而不是在spring配置文件中修改 -->
    <!-- spring支持文件路径的前缀符号classpath
        classpath在maven项目中即是 java和resources下面的目录 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>


    <!-- 2. 配置数据库连接池 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!-- 配置连接池基本属性 -->
        <property name="driverClass" value="${driver}"/>
        <property name="jdbcUrl" value="${url}"/>
        <property name="user" value="${username}"/>
        <property name="password" value="${password}"/>

        <!-- 连接池的私有属性 这里是c3p0 通常情况下默认配置可以满足大部分需求
                此处是一个高并发案例 可能会有连接被锁住其他线程拿不到连接的情况 需要稍作调整 -->
        <!-- 池中最大连接数默认是 15 -->
        <property name="maxPoolSize" value="30"/>
        <!-- 池中最小连接数默认是 3 -->
        <property name="minPoolSize" value="10"/>
        <!-- 关闭连接后不自动commit -->
        <property name="autoCommitOnClose" value="false"/>
        <!-- maxPoolSize用满时 等待最大连接数超时时间设置为1秒
             c3p0 的 checkoutTimeout = 0 无线等待直到有可用连接为止
             造成类似于饥饿性死锁 应该有一个超时时间 把用户请求的线程资源释放掉
         -->
        <property name="checkoutTimeout" value="1000"/>
        <!-- 当获取连接失败时重试次数  -->
        <property name="acquireRetryAttempts" value="2"/>
    </bean>


    <!-- 约定大于配置（新建的业务放入到指定目录即可按照约定完成自动扫描 注入等
            这里包括 指定包下实体类的扫描 mabatis sql的xml配置文件 以及 dao接口自动实现注入）
            使用mybatis hibernate jdbc都需要进行 1. 2步骤 配置
            3. 4步骤为mybatis和spring的整合 -->
    <!-- 3. 配置sqlSessionFactory对象
         配置好之后就可以放入spring容器中 -->
    <!-- 此处使用pom中添加的mybatis整合依赖类 org.mybatis.mybatis-spring -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据库连接池 -->
        <!-- 在此处指定 之前2中 配置的数据库连接池 -->
        <property name="dataSource" ref="dataSource"></property>
        <!-- 此处指定之前的xml配置文件 配置mybatis 全局配置文件：mybatis-config.xml -->
        <!-- spring支持文件路径的前缀符号classpath
                classpath在maven项目中即是 java和resources下面的目录 -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!-- 通过mybatis和spring整合可以节省配置：扫描entity包 使用别名
            如：org.seckill.entity.Seckill -> Seckill -->
        <!-- 如果指定多个包 用;分割开即可 这里只有一个包 org.seckill.entity -->
        <property name="typeAliasesPackage" value="org.seckill.entity"/>
        <!-- 扫描sql配置文件：mapper需要的xml文件 -->
        <!-- 如果指定多个目录 用;分割开即可 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>


    <!-- 4. 配置扫描Dao接口包 目的是在spring启动容器时动态实现Dao接口 并注入到spring容器中 -->
    <!-- 此处不需要提供bean id 因为不需要在别处引用 直接配置出来即可
            而上面的dataSource或者sqlSessionFactory 都要在别的地方引用 所以需要提供id
            方便在spring容器里查找id对应的类型实例
            -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入上面配置的sqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!-- 给出需要扫描的Dao接口包
                通过扫描指定目录下的Dao接口包 达到自动实现Dao接口 实现类 并且注入到spring容器中 -->
        <property name="basePackage" value="org.seckill.dao"/>
    </bean>


    <!-- 5. 注入RedisDao -->
    <!-- 因为Redis 不是Mybatis 数据库的操作，所以不会通过 Mybatis 自动生成dao接口实现类，需要自己注入 -->
    <bean id="redisDao" class="org.seckill.dao.cache.RedisDao">
        <!-- 构造方法注入 告诉 RedisDao 这个Bean  必须传递 ip port 构造  -->
        <!-- 此处是测试环境的redis 线上环境需要把相关配置 放到配置文件 -->
        <constructor-arg index="0" value="127.0.0.1"/>
        <constructor-arg index="1" value="6379"/>
    </bean>

</beans>